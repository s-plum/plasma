//
// Button Classes
// --------------------------------------------------


// Reset Button
// -------------------------
// In an article on CSS-Tricks
// (http://css-tricks.com/use-button-element/),
// Chris Coyier explains that:
// "if a button doesn’t have a meaningful
// href, it’s a <button>"; which makes sense.
//
// This placeholder resets <button>'s
// default styling, so we can use
// <button>s where it makes without
// worrying about the styling.

@mixin button-reset {
  cursor: pointer;
  padding: 0;
  background-color: transparent;
  // Reset unusual Firefox-on-Android default style;
  // https://github.com/necolas/normalize.css/issues/214
  background-image: none;
  border: 1px solid transparent;
  white-space: nowrap;
  -webkit-appearance: none;
  user-select: none;

  &:active {
    outline: 0;
  }
}

// Button Style Mixin
// -------------------------
// generates every style needed for a new button
// when passed the apropriate colors
//
// $fill-color     - background color for the button
// $text-color     - button text color
// $secondary-text-color       - text color used with secondary modifier class (defaults to fill color)
// $secondary-hover-text-color - background color used with secondary modifier class (defaults to text color)

@mixin button-style($fill-color, $text-color, $secondary-text-color:$fill-color, $secondary-hover-text-color:$text-color) {
  //button state colors
  $hover-background-color:  darken($fill-color, 20%);
  $active-background-color: darken($fill-color, 35%);
  $secondary-active-background-color: darken($fill-color, 35%);

  //base style
  background-color: $fill-color;
  color: $text-color;
  border-color: $secondary-text-color;
  border: 1px solid transparent;
  transition: background-color .1s ease 0s;

  //only have hover styles if button is not disabled
  &:not(.button--disabled):not(:disabled) {
    &:hover {
      background-color: $hover-background-color;
      transition: background-color .15s ease 0s;
    }

    &:active { background-color: $active-background-color; }
  }

  //colored button + secondary button styles
  &.button--secondary {
    border: 1px solid $fill-color;
    color: $secondary-text-color;
    background: none;

    &:hover {
      transition: background-color .15s ease 0s;
    }
  }

  //only have hover styles if button is not disabled
  &.button--secondary:not(.button--disabled):not(:disabled) {
    &:hover {
      background-color: $fill-color;
      color: $secondary-hover-text-color;
    }

    &:active {
      background-color: $secondary-active-background-color;
      border-color:     $secondary-active-background-color;
      color:            $secondary-hover-text-color;
    }
  }

  //colored button + secondary + icon button styles
  &.button--secondary.button--icon {
    > svg {
      fill: $fill-color;
    }

    &:not(.button--disabled):not(:disabled):hover svg {
      fill: $color-blank;
    }
  }
}

// Button
// -------------------------
.button {
  @include button-reset;
  font-family: inherit;
  padding: .5rem .875rem;
  font-size: $text-4;
  line-height: $line-height-form;
  border-radius: $border-radius;
  text-decoration: none;
  cursor: pointer;
  display: inline-block;
  border: 1px solid transparent;
  text-align: center;

  @include button-style($fill-blue, $text-white);
}

// Colored Buttons
// -------------------------

.button--negative {
  @include button-style($fill-red, $text-white); // this is opinionated
}

.button--white {
  @include button-style($fill-white, $text-gray);

  // white button has unique hover state
  &:not(.button--disabled):not(:disabled):hover {
    background-color: rgba(255,255,255,.8);
  }

  &.button--secondary:not(.button--disabled):not(:disabled):active { background-color: rgba(255,255,255,.8); }

  &.button--icon {
    >svg                               { fill: $fill-gray-darker; }
    &:not(.button--disabled):not(:disabled):hover svg { fill: $fill-gray-darker; }
  }

  &.button--secondary.button--icon {
    >svg                               { fill: $fill-white; }
    &:not(.button--disabled):not(:disabled):hover svg { fill: $fill-gray-darker; }
  }
}

// transparent button has unique fill rules
.button--transparent {
  background-color: transparent;
  color: $text-blue;
  border-color: transparent;
  border: 1px solid transparent;

  &:not(.button--disabled):not(:disabled):hover {
    background-color: transparent;
    color: darken($text-blue, 20%);
  }
}


// Disabled Button
// -------------------------

.button--disabled,
.button:disabled {
  opacity: $opacity-disabled;

  &:hover {
    cursor: default;
    transition: none;
  }
}


// Small Button
// -------------------------

.button--small {
  padding: .3125rem .625rem;
  font-size: $text-5;
  line-height: $line-height-form-small;
}


// Icon Button
// -------------------------

.button--icon {
  >svg {
    width: 1rem;
    height: 1rem;
    fill: $color-blank;
    position: relative;
    top: .125rem;
    margin-right: .5rem; // so it can be overwritten by solid classes if the button has no text
  }

  &.button--small >svg {
    width: .875rem;
    height: .875rem;
    position: relative;
    margin-right: .3125rem;  // so it can be overwritten by solid classes if the button has no text
  }
}


// Social Button
// -------------------------

@mixin social-button($color) {
  background-color: $color;
  color: $text-white;

  &:not(.button--disabled):not(:disabled):hover {
    background-color: darken($color, 20%);
    color: $text-white;
  }

  &.button--disabled:hover,
  &:disabled:hover {
    color: $text-white;
  }

  &:not(.button--disabled):not(:disabled):active {
    background-color: darken($color, 35%);
  }
}

@each $network in $generate-social {
  .button--#{$network} { @include social-button(map-get($color-social, $network)); }
}
